#!/usr/bin/env bash
# ┬┌─┬ ┬┌┐┌┌─┐┌┬┐
# ├┴┐│ ││││└─┐ │
# ┴ ┴└─┘┘└┘└─┘ ┴
# Created by Siddharth Dushantha
# Modified by CodeWithMa
#
# Dependencies: imagemagick, bash, mpc

VERSION=1.3.4
COVER=/tmp/kunst.jpg
MUSIC_DIR="${KUNST_MUSIC_DIR:-~/Music}"
SIZE="${KUNST_SIZE:-250x250}"
PROG_NAME=$(basename "$0")

show_help() {
  printf "%s" "\
usage: kunst [-h|--help] [--size \"px\"]
             [--music_dir \"path/to/dir/\"] [--verbose] [--version]

┬┌─┬ ┬┌┐┌┌─┐┌┬┐
├┴┐│ ││││└─┐ │
┴ ┴└─┘┘└┘└─┘ ┴
Find album art for the currently playing song in MPD

optional arguments:
   -h, --help            show this help message and exit
   --size                what size to display the album art in
   --music_dir           the music directory which MPD plays from
   --verbose             show the output
   --version             show the version of kunst you are using
"
}

log() {
  [ "$VERBOSE" ] && echo "$PROG_NAME: $1"
}

logError() {
  echo "$PROG_NAME: $1" >&2
  exit 1
}

# Parse the arguments
options=$(getopt -o h --long 'size:,music_dir:,version,verbose,help' -- "$@")
eval set -- "$options"

while true; do
  case "$1" in
  --size)
    shift
    SIZE=$1
    ;;
  --music_dir)
    shift
    MUSIC_DIR=$1
    ;;
  -h | --help)
    show_help
    exit
    ;;
  --version)
    echo $VERSION
    exit
    ;;
  --verbose)
    VERBOSE=true
    ;;
  --)
    shift
    break
    ;;
  esac
  shift
done

# This is a base64 endcoded image which will be used if
# the file does not have an emmbeded album art.
# The image is an image of a music note
read -r -d '' MUSIC_NOTE <<EOF
iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJESURBVGhD7Zg/axRRFMVXAtpYphEVREKClnHfJI0MmReSfAC3tRejhaBgo70fwN7aD2BvEU0gfztbu5AqMxNjoVnvG87KZXy7z5m5dxLI/OCw8Pade+7M3n3Dbq+jo6OjY8RwMJhKk+hhlph3eRJ9w/LF5jCOr1PTj6jpD7mNjkjDkbDl4vFjpX87teZJlkSfSD9501zYfv5QJ1fyZHGexuJtZs12ZqMzX8NlwX4+nK3NXMutWaOm39Nd/u5rMCSUao80fjBNwY+p8Y+krNxQVaGsLsfWzFLYS2r4M30Rf5WbaCJE6OILlhIidPEFSwkRuviCpYQIXXzB1WX26bR6ky4v3OPriNCFB1YRHa079Pr6eKk/h1IFfA+WdOGBk+QeXtT0Ft3pV6e2fxf2f+AeLOnCA8tC0xv09H1xGi/cgWUi3I8lXXigEzX8u3gmWPP8JI5uYdt/w2thSRceSM0/zVfnb+CtWvB6WNJFOlC6XhDpQOl6QaQDpesFkQ6UrhdEOlC6XpA6gcPB/avumKXnxCadXHkha766tTr1GlE18CRZvEmN7nHfOMGiS5XA4mdmYg64Z5Jg06VKYHlEQoKtOVIz6zx8f0iwNUNyZt2F+3zjBFt9pGe22gWYFLb6lEckJNjGUmWEssR8ga0+0jNL9Z75fD7Rp7UOW32kZxb/1u37vFyUu+sODtjqozGzxaFADfprFM3vuD3Y3gytmf17LJPHXbgTNb5BWhe58yNan1lpWp9ZDVqdWS1am9mOjo7LRq/3B1ESKyYUVquzAAAAAElFTkSuQmCC
EOF

find_album_art() {
  DIR="$MUSIC_DIR$(dirname "$(mpc current -f %file%)")"
  log "inspecting $DIR"

  # Check if there is an album cover/art in the folder.
  # Look at issue #9 for more details
  for CANDIDATE in "$DIR/cover."{png,jpg,webp}; do
    if [ -f "$CANDIDATE" ]; then
      ARTLESS=false
      convert "$CANDIDATE" $COVER &>/dev/null
      log "found $CANDIDATE"
      return
    fi
  done

  ARTLESS=true
  log "no album art found"
}

update_cover() {
  find_album_art

  if [ "$ARTLESS" == false ]; then
    convert "$COVER" -resize "$SIZE" "$COVER" &>/dev/null
    log "resized album art to $SIZE"
  fi

  if [ "$ARTLESS" == true ]; then
    # Decode the base64 encoded image and save it
    echo "$MUSIC_NOTE" | base64 --decode >"$COVER"
    log "used backup cover album art"
  fi
}

main() {

  dependencies=(convert bash mpc)
  for dependency in "${dependencies[@]}"; do
    type -p "$dependency" &>/dev/null || {
      logError "could not find '${dependency}', is it installed?"
    }
  done

  while true; do
    update_cover

    log "swapped album art to $(mpc current)"

    # Waiting for an event from mpd; play/pause/next/previous
    # this is lets kunst use less CPU :)
    while true; do
      mpc idle player &>/dev/null && (mpc status | grep "\[playing\]" &>/dev/null) && break
    done
    log "received event from mpd"
  done
}

main
